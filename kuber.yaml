- hosts: all
  vars:
    master_ports:
      - { name: 'Kubernetes API server', port: '6443/tcp' }
      - { name: 'etcd server client API', port: '2379-2380/tcp' }
      - { name: 'Kubelet API', port: '10250/tcp' }
      - { name: 'kube-scheduler', port: '10251/tcp' }
      - { name: 'kube-controller-manager', port: '10252/tcp' }
    node_ports:
      - { name: 'Kubelet API', port: '10250/tcp' }
      - { name: 'NodePort Services', port: '30000-32767/tcp' }

  tasks:
    - name: "firewall-cmd for master"
      firewalld: 
        port: "{{ item.port }}"
        permanent: true
        state: enabled
        immediate: true
      with_items: "{{ master_ports }}"
      when: kube == "master"

    - name: "firewall-cmd for node"
      firewalld:
        port: "{{ item.port }}"
        permanent: true
        state: enabled
        immediate: true
      with_items: "{{ node_ports }}"
      when: kube == "node"

    - name: "swapoff -a"
      shell: swapoff -a

    - name: "Change fstab file for swapoff enabling ca"
      lineinfile:
        dest: /etc/fstab
        state: present
        regexp: '^/dev/mapper/centos-swap'
        line: '#/dev/mapper/centos-swap'
        backrefs: yes

    - name: "Adding the repo file for installing the latest docker module"
      shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: "Installing latest docker"
      yum: name=docker

    - name: "systemctl enable docker"
      systemd:
        name: docker
        enabled: yes
        state: started
        masked: no

    - name: "Adding kubernetes repo"
      lineinfile:
        dest: /etc/yum.repos.d/kubernetes.repo
        create: yes
        state: present
        line: "{{ item.line }}"
      with_items:
        - { line: '[kubernetes]' }
        - { line: 'name=Kubernetes' }
        - { line: 'baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64' }
        - { line: 'enabled=1' }
        - { line: 'gpgcheck=1' }
        - { line: 'repo_gpgcheck=1' }
        - { line: 'gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg' }
        - { line: 'exclude=kube*' }

    - name: "Setting off the SELinux"
      selinux:
        state: disabled

    - name: "sed -i s/^SELINUX=enforcing$/SELINUX=permissive/ /etc/selinux/config"
      lineinfile:
        dest: /etc/selinux/config
        state: present
        regexp: '^SELINUX=enforcing$'
        line: 'SELINUX=permissive'
        backrefs: yes

    - name: "yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes"
      yum:
        name: "{{ item.name }}"
        state: latest
        disable_excludes: "kubernetes"  
      with_items:
        - { name: "kubelet" }
        - { name: "kubeadm" }
        - { name: "kubectl" }

    - name: "Call systemctl enable kubelet"
      systemd:
        name: "kubelet"
        enabled: yes

    - name: "Add KUBELET_EXTRA_ARGS variable."
      lineinfile:
        dest: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
        state: present
        regexp: '^EnvironmentFile=\-/etc/sysconfig/kubelet\nExecStart='
        line: 'EnvironmentFile=-/etc/sysconfig/kubelet\nEnvironment="KUBELET_EXTRA_ARGS=--cgroup=systemd"\nExecStart='
        backrefs: yes

    - name: "Sysctl for bugs"
      sysctl: 
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: "/etc/sysctl.d/k8s.conf"
        state: present
        reload: yes
      with_items:
        - { name: "net.bridge.bridge-nf-call-ip6tables", value: 1 }
        - { name: "net.bridge.bridge-nf-call-iptables", value: 1 }

    - name: "Restart kubelet cron on cetnos"
      systemd:
        state: restarted
        daemon_reload: yes
      when: kube == "master"
      ignore_errors: yes

    - name: "Kubeadm init"
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_eth1.ipv4.address }}
      when: kube == "master"

    - name: "mkdir -p $HOME/.kube"
      file:
        path: /root/.kube
        state: directory
        owner: root
        group: root
        mode: 0755
      when: kube == "master"

    - name: "Kubeadm token create"
      shell: kubeadm token create --print-join-commmand
      register: result
      when: kube == "master"

